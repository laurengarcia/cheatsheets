FIZZ BUZZ

Write a program that prints the numbers from 1 to 100. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz".


// Javascript (ES5)
var fizzBuzz = function () {
  var i, output;
  for (i = 1; i <= 100; i++) {
    output = '';
    if (!(i % 3)) { output += 'Fizz'; }
    if (!(i % 5)) { output += 'Buzz'; }
    console.log(output || i);//empty string is false, so we short-circuit
  }
};


# Bash.
for i in {1..100} # Use i to loop from "1" to "100", inclusive.
do  ((i % 3)) &&  # If i is not divisible by 3...
        x= ||     # ...blank out x (yes, "x= " does that).  Otherwise,...
        x=Fizz    # ...set (not append) x to the string "Fizz".
    ((i % 5)) ||  # If i is not divisible by 5, skip (there's no "&&")...
        x+=Buzz   # ...Otherwise, append (not set) the string "Buzz" to x.
   echo ${x:-$i}  # Print x unless it is blanked out.  Otherwise, print i.
done


// Rust
use std::borrow::Cow; // Allows us to avoid unnecessary allocations
fn main() {
    (1..101).map(|n| match (n % 3, n % 5) {
        (0, 0) => "FizzBuzz".into(),
        (0, _) => "Fizz".into(),
        (_, 0) => "Buzz".into(),
        _ => Cow::from(n.to_string())
    }).for_each(|n| println!("{}", n));
}


/* CSS */
<style>
li {
  list-style-position: inside;
}
li:nth-child(3n), li:nth-child(5n) {
  list-style-type: none;
}
li:nth-child(3n)::before {
  content:'Fizz';
}
li:nth-child(5n)::after {
  content:'Buzz';
}
</style>


// Java
import java.util.*;
public class fizzbuzz{
public static void main(String[] args) {

  for(int i=0;i<=50;i++) {
    if(i%3==0 && i%5==0) System.out.println("FizzBuzz");
    else
    if(i%5==0) System.out.println("Buzz");
    else
    if(i%3==0) System.out.println("Fizz");
    else
    System.out.println(i);

    }
 }
}
