FRESH LOCAL PROJECT
$ git init

FRESH CLONE FROM GITHUB
$ git clone https://github.com/<user>/<repo>.git

CHECKOUT remote branch locally, track upstream
$ git checkout --track origin/main

SET REMOTE
$ git remote -v
$ git remote add origin https://github.com/<user>/<repo>.git
$ git remote set-url origin https://github.com/<user>/<repo>.git

LOGS
$ git log
$ git log --oneline
$ git log --graph
$ git log --graph --all
$ git log --graph --oneline --branches

CREATE NEW BRANCH
$ git checkout -b main
$ git checkout -b main --track upstream/main

FETCH upstream without modifying working dir
$ git fetch
$ git fetch origin

FETCH AND MERGE in one command
$ git pull origin main
$ git pull --rebase

REBASE
$ git rebase foobranch
...for `dist/` or other built dirs, 
if conflicts occur during an interactive rebase,
$ git add dist/
$ git rebase --continue
... then run your `dist` command to rebuild the files at the end

MERGE upstream changes with local work (careful w this!)
$ git merge origin/main
$ git merge --abort

CHERRY PICK a change into current branch
$ git cherry-pick -x <git sha>

RESET
to wipe out local changes up to last commit or an earlier commit in log
$ git reset --hard
# git reset --hard <git sha>

COMMIT
$ git commit -a -m "just did the thing"
$ git commit --amend
...drops you into text editor to change msg on last commit

SQUASH last 5 commits into one on a single branch
an interactive session is triggered,
select one line & edit "pick" to say "squash"
on the other four, then save & exit
$ git rebase -i HEAD~5

SQUASH also an option when merging feature branches
$ git merge --squash feature/login

TAG (simple)
$ git tag v1.0
$ git push origin v1.0

PUSH TO REMOTE
$ git push origin <branch name>
$ git push origin <branch name> -f  # force-push to remote
force-pushing rewrites history; use with caution!

REFLOG
use to recover from bad force-push; use with caution!
$ git branch foobar-bak # first! back up current branch just in case
$ git reflog
... get the git sha of the latest push to remote
and use it to reset, then force-push upstream to remote again
$ git reset --hard 5e2791da4
$ git push origin <branch name> -f # force-push to remote rewrites history
