# fresh project locally
$ git init

# fresh clone of a project on github
$ git clone https://github.com/<user>/<repo>.git

# checkout remote branch locally, track upstream:
$ git checkout --track origin/master

# create new branch
$ git checkout -b foobranch
$ git checkout -b foobranch --track upstream/foobranch

# upstream settings
$ git remote -v
$ git remote add origin https://github.com/<user>/<repo>.git
$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git

# fetch upstream but do not modify working directory
$ git fetch
$ git fetch origin

# merge upstream changes with local work
$ git merge origin/master
$ git merge --abort

# git fetch and merge in same command
$ git pull origin/foobranch
$ git pull --rebase

# git rebase
$ git rebase foobranch
# for `dist/` or other types of built files, 
# if conflicts occur during an interactive rebase,
$ git add dist/
$ git rebase --continue
# ... then run your `dist` command to rebuild the files at the end

# cherry pick a change into current branch
$ git cherry-pick -x <git sha>

# view log
$ git log
$ git log --oneline

# wipe out local changes to last commit or an earlier commit in log
$ git reset --hard
# git reset --hard <git sha>

# squash last 5 commits into one on a single branch
# interactive session is triggered,
# select one line & edit "pick" to say "squash"
# on the other four, then save & exit
$ git rebase -i HEAD~5

# squash is also an option when merging feature branches
$ git merge --squash feature/login

# git tags (simple)
$ git tag v1.0
$ git push origin v1.0

# git push upstream
$ git push origin <branch name>
$ git push origin <branch name> -f  # force-push upstream, rewrites history

# recover from bad force-push
$ git reflog
# get the git sha of the latest push to remote/ upstream 
# and use it to reset then force-push upstream
$ git reset --hard 5e2791da4
$ git push origin <branch name> -f 
